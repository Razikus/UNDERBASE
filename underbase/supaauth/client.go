// Package admin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package admin

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	APIKeyAuthScopes = "APIKeyAuth.Scopes"
	UserAuthScopes   = "UserAuth.Scopes"
)

// Defines values for AccessTokenResponseSchemaWeakPasswordReasons.
const (
	AccessTokenResponseSchemaWeakPasswordReasonsCharacters AccessTokenResponseSchemaWeakPasswordReasons = "characters"
	AccessTokenResponseSchemaWeakPasswordReasonsLength     AccessTokenResponseSchemaWeakPasswordReasons = "length"
	AccessTokenResponseSchemaWeakPasswordReasonsPwned      AccessTokenResponseSchemaWeakPasswordReasons = "pwned"
)

// Defines values for CredentialCreationOptionsAttestation.
const (
	Direct   CredentialCreationOptionsAttestation = "direct"
	Indirect CredentialCreationOptionsAttestation = "indirect"
	None     CredentialCreationOptionsAttestation = "none"
)

// Defines values for CredentialCreationOptionsAuthenticatorSelectionAuthenticatorAttachment.
const (
	CrossPlatform CredentialCreationOptionsAuthenticatorSelectionAuthenticatorAttachment = "cross-platform"
	Platform      CredentialCreationOptionsAuthenticatorSelectionAuthenticatorAttachment = "platform"
)

// Defines values for CredentialCreationOptionsAuthenticatorSelectionUserVerification.
const (
	CredentialCreationOptionsAuthenticatorSelectionUserVerificationDiscouraged CredentialCreationOptionsAuthenticatorSelectionUserVerification = "discouraged"
	CredentialCreationOptionsAuthenticatorSelectionUserVerificationPreferred   CredentialCreationOptionsAuthenticatorSelectionUserVerification = "preferred"
	CredentialCreationOptionsAuthenticatorSelectionUserVerificationRequired    CredentialCreationOptionsAuthenticatorSelectionUserVerification = "required"
)

// Defines values for CredentialCreationOptionsPubKeyCredParamsType.
const (
	CredentialCreationOptionsPubKeyCredParamsTypePublicKey CredentialCreationOptionsPubKeyCredParamsType = "public-key"
)

// Defines values for CredentialRequestOptionsUserVerification.
const (
	CredentialRequestOptionsUserVerificationDiscouraged CredentialRequestOptionsUserVerification = "discouraged"
	CredentialRequestOptionsUserVerificationPreferred   CredentialRequestOptionsUserVerification = "preferred"
	CredentialRequestOptionsUserVerificationRequired    CredentialRequestOptionsUserVerification = "required"
)

// Defines values for ErrorSchemaWeakPasswordReasons.
const (
	ErrorSchemaWeakPasswordReasonsCharacters ErrorSchemaWeakPasswordReasons = "characters"
	ErrorSchemaWeakPasswordReasonsLength     ErrorSchemaWeakPasswordReasons = "length"
	ErrorSchemaWeakPasswordReasonsPwned      ErrorSchemaWeakPasswordReasons = "pwned"
)

// Defines values for PublicKeyCredentialDescriptorTransports.
const (
	Ble      PublicKeyCredentialDescriptorTransports = "ble"
	Internal PublicKeyCredentialDescriptorTransports = "internal"
	Nfc      PublicKeyCredentialDescriptorTransports = "nfc"
	Usb      PublicKeyCredentialDescriptorTransports = "usb"
)

// Defines values for PublicKeyCredentialDescriptorType.
const (
	PublicKeyCredentialDescriptorTypePublicKey PublicKeyCredentialDescriptorType = "public-key"
)

// Defines values for TOTPPhoneChallengeResponseType.
const (
	TOTPPhoneChallengeResponseTypePhone TOTPPhoneChallengeResponseType = "phone"
	TOTPPhoneChallengeResponseTypeTotp  TOTPPhoneChallengeResponseType = "totp"
)

// Defines values for WebAuthnChallengeResponseType.
const (
	Webauthn WebAuthnChallengeResponseType = "webauthn"
)

// Defines values for PostFactorsJSONBodyFactorType.
const (
	PostFactorsJSONBodyFactorTypePhone    PostFactorsJSONBodyFactorType = "phone"
	PostFactorsJSONBodyFactorTypeTotp     PostFactorsJSONBodyFactorType = "totp"
	PostFactorsJSONBodyFactorTypeWebauthn PostFactorsJSONBodyFactorType = "webauthn"
)

// Defines values for PostFactorsFactorIdChallengeJSONBodyChannel.
const (
	PostFactorsFactorIdChallengeJSONBodyChannelSms      PostFactorsFactorIdChallengeJSONBodyChannel = "sms"
	PostFactorsFactorIdChallengeJSONBodyChannelWhatsapp PostFactorsFactorIdChallengeJSONBodyChannel = "whatsapp"
)

// Defines values for PutUserJSONBodyChannel.
const (
	PutUserJSONBodyChannelSms      PutUserJSONBodyChannel = "sms"
	PutUserJSONBodyChannelWhatsapp PutUserJSONBodyChannel = "whatsapp"
)

// AccessTokenResponseSchema defines model for AccessTokenResponseSchema.
type AccessTokenResponseSchema struct {
	// AccessToken A valid JWT that will expire in `expires_in` seconds.
	AccessToken *string `json:"access_token,omitempty"`

	// ExpiresAt UNIX timestamp after which the `access_token` should be renewed by using the refresh token with the `refresh_token` grant type.
	ExpiresAt *int `json:"expires_at,omitempty"`

	// ExpiresIn Number of seconds after which the `access_token` should be renewed by using the refresh token with the `refresh_token` grant type.
	ExpiresIn *int `json:"expires_in,omitempty"`

	// RefreshToken An opaque string that can be used once to obtain a new access and refresh token.
	RefreshToken *string `json:"refresh_token,omitempty"`

	// TokenType What type of token this is. Only `bearer` returned, may change in the future.
	TokenType *string `json:"token_type,omitempty"`

	// User Object describing the user related to the issued access and refresh tokens.
	User *UserSchema `json:"user,omitempty"`

	// WeakPassword Only returned on the `/token?grant_type=password` endpoint. When present, it indicates that the password used is weak. Inspect the `reasons` and/or `message` properties to identify why.
	WeakPassword *struct {
		Message *string                                         `json:"message,omitempty"`
		Reasons *[]AccessTokenResponseSchemaWeakPasswordReasons `json:"reasons,omitempty"`
	} `json:"weak_password,omitempty"`
}

// AccessTokenResponseSchemaWeakPasswordReasons defines model for AccessTokenResponseSchema.WeakPassword.Reasons.
type AccessTokenResponseSchemaWeakPasswordReasons string

// CredentialCreationOptions Options for creating a new credential
type CredentialCreationOptions struct {
	// Attestation Preferred attestation conveyance
	Attestation            *CredentialCreationOptionsAttestation `json:"attestation,omitempty"`
	AuthenticatorSelection *struct {
		AuthenticatorAttachment *CredentialCreationOptionsAuthenticatorSelectionAuthenticatorAttachment `json:"authenticatorAttachment,omitempty"`
		RequireResidentKey      *bool                                                                   `json:"requireResidentKey,omitempty"`
		UserVerification        *CredentialCreationOptionsAuthenticatorSelectionUserVerification        `json:"userVerification,omitempty"`
	} `json:"authenticatorSelection,omitempty"`

	// Challenge A challenge to be signed by the authenticator
	Challenge          *[]byte                          `json:"challenge,omitempty"`
	ExcludeCredentials *[]PublicKeyCredentialDescriptor `json:"excludeCredentials,omitempty"`
	PubKeyCredParams   *[]struct {
		Alg  *int                                           `json:"alg,omitempty"`
		Type *CredentialCreationOptionsPubKeyCredParamsType `json:"type,omitempty"`
	} `json:"pubKeyCredParams,omitempty"`
	Rp *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"rp,omitempty"`

	// Timeout Time (in milliseconds) that the caller is willing to wait for the call to complete
	Timeout *int `json:"timeout,omitempty"`

	// User Object describing the user related to the issued access and refresh tokens.
	User *UserSchema `json:"user,omitempty"`
}

// CredentialCreationOptionsAttestation Preferred attestation conveyance
type CredentialCreationOptionsAttestation string

// CredentialCreationOptionsAuthenticatorSelectionAuthenticatorAttachment defines model for CredentialCreationOptions.AuthenticatorSelection.AuthenticatorAttachment.
type CredentialCreationOptionsAuthenticatorSelectionAuthenticatorAttachment string

// CredentialCreationOptionsAuthenticatorSelectionUserVerification defines model for CredentialCreationOptions.AuthenticatorSelection.UserVerification.
type CredentialCreationOptionsAuthenticatorSelectionUserVerification string

// CredentialCreationOptionsPubKeyCredParamsType defines model for CredentialCreationOptions.PubKeyCredParams.Type.
type CredentialCreationOptionsPubKeyCredParamsType string

// CredentialRequestOptions Options for requesting an assertion
type CredentialRequestOptions struct {
	AllowCredentials *[]PublicKeyCredentialDescriptor `json:"allowCredentials,omitempty"`

	// Challenge A challenge to be signed by the authenticator
	Challenge *[]byte `json:"challenge,omitempty"`

	// RpId Relying Party ID
	RpId *string `json:"rpId,omitempty"`

	// Timeout Time (in milliseconds) that the caller is willing to wait for the call to complete
	Timeout *int `json:"timeout,omitempty"`

	// UserVerification User verification requirement
	UserVerification *CredentialRequestOptionsUserVerification `json:"userVerification,omitempty"`
}

// CredentialRequestOptionsUserVerification User verification requirement
type CredentialRequestOptionsUserVerification string

// ErrorSchema defines model for ErrorSchema.
type ErrorSchema struct {
	// Code The HTTP status code. Usually missing if `error` is present.
	Code *int `json:"code,omitempty"`

	// Error Certain responses will contain this property with the provided values.
	//
	// Usually one of these:
	//   - invalid_request
	//   - unauthorized_client
	//   - access_denied
	//   - server_error
	//   - temporarily_unavailable
	//   - unsupported_otp_type
	Error *string `json:"error,omitempty"`

	// ErrorDescription Certain responses that have an `error` property may have this property which describes the error.
	ErrorDescription *string `json:"error_description,omitempty"`

	// Msg A basic message describing the problem with the request. Usually missing if `error` is present.
	Msg *string `json:"msg,omitempty"`

	// WeakPassword Only returned on the `/signup` endpoint if the password used is too weak. Inspect the `reasons` and `msg` property to identify the causes.
	WeakPassword *struct {
		Reasons *[]ErrorSchemaWeakPasswordReasons `json:"reasons,omitempty"`
	} `json:"weak_password,omitempty"`
}

// ErrorSchemaWeakPasswordReasons defines model for ErrorSchema.WeakPassword.Reasons.
type ErrorSchemaWeakPasswordReasons string

// IdentitySchema defines model for IdentitySchema.
type IdentitySchema struct {
	CreatedAt    *time.Time              `json:"created_at,omitempty"`
	Email        *openapi_types.Email    `json:"email,omitempty"`
	Id           *openapi_types.UUID     `json:"id,omitempty"`
	IdentityData *map[string]interface{} `json:"identity_data,omitempty"`
	IdentityId   *openapi_types.UUID     `json:"identity_id,omitempty"`
	LastSignInAt *time.Time              `json:"last_sign_in_at,omitempty"`
	Provider     *string                 `json:"provider,omitempty"`
	UpdatedAt    *time.Time              `json:"updated_at,omitempty"`
	UserId       *openapi_types.UUID     `json:"user_id,omitempty"`
}

// MFAFactorSchema Represents a MFA factor.
type MFAFactorSchema struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// FactorType Usually one of:
	// - totp
	// - phone
	// - webauthn
	FactorType       *string             `json:"factor_type,omitempty"`
	FriendlyName     *string             `json:"friendly_name,omitempty"`
	Id               *openapi_types.UUID `json:"id,omitempty"`
	LastChallengedAt *time.Time          `json:"last_challenged_at"`
	Phone            *string             `json:"phone"`

	// Status Usually one of:
	// - verified
	// - unverified
	Status             *string                 `json:"status,omitempty"`
	UpdatedAt          *time.Time              `json:"updated_at,omitempty"`
	WebAuthnCredential *map[string]interface{} `json:"web_authn_credential,omitempty"`
}

// PublicKeyCredentialDescriptor defines model for PublicKeyCredentialDescriptor.
type PublicKeyCredentialDescriptor struct {
	// Id Credential ID
	Id         *[]byte                                    `json:"id,omitempty"`
	Transports *[]PublicKeyCredentialDescriptorTransports `json:"transports,omitempty"`
	Type       *PublicKeyCredentialDescriptorType         `json:"type,omitempty"`
}

// PublicKeyCredentialDescriptorTransports defines model for PublicKeyCredentialDescriptor.Transports.
type PublicKeyCredentialDescriptorTransports string

// PublicKeyCredentialDescriptorType defines model for PublicKeyCredentialDescriptor.Type.
type PublicKeyCredentialDescriptorType string

// TOTPPhoneChallengeResponse defines model for TOTPPhoneChallengeResponse.
type TOTPPhoneChallengeResponse struct {
	// ExpiresAt UNIX seconds of the timestamp past which the challenge should not be verified.
	ExpiresAt int `json:"expires_at"`

	// Id ID of the challenge.
	Id openapi_types.UUID `json:"id"`

	// Type Type of the challenge.
	Type TOTPPhoneChallengeResponseType `json:"type"`
}

// TOTPPhoneChallengeResponseType Type of the challenge.
type TOTPPhoneChallengeResponseType string

// UserSchema Object describing the user related to the issued access and refresh tokens.
type UserSchema struct {
	AppMetadata *map[string]interface{} `json:"app_metadata,omitempty"`
	// Deprecated:
	Aud                *string    `json:"aud,omitempty"`
	BannedUntil        *time.Time `json:"banned_until,omitempty"`
	ConfirmationSentAt *time.Time `json:"confirmation_sent_at,omitempty"`
	ConfirmedAt        *time.Time `json:"confirmed_at,omitempty"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	DeletedAt          *time.Time `json:"deleted_at,omitempty"`

	// Email User's primary contact email. In most cases you can uniquely identify a user by their email address, but not in all cases.
	Email             *string              `json:"email,omitempty"`
	EmailChangeSentAt *time.Time           `json:"email_change_sent_at,omitempty"`
	EmailConfirmedAt  *time.Time           `json:"email_confirmed_at,omitempty"`
	Factors           *[]MFAFactorSchema   `json:"factors,omitempty"`
	Id                *openapi_types.UUID  `json:"id,omitempty"`
	Identities        *[]IdentitySchema    `json:"identities,omitempty"`
	IsAnonymous       *bool                `json:"is_anonymous,omitempty"`
	LastSignInAt      *time.Time           `json:"last_sign_in_at,omitempty"`
	NewEmail          *openapi_types.Email `json:"new_email,omitempty"`
	NewPhone          *string              `json:"new_phone,omitempty"`

	// Phone User's primary contact phone number. In most cases you can uniquely identify a user by their phone number, but not in all cases.
	Phone                  *string                 `json:"phone,omitempty"`
	PhoneChangeSentAt      *time.Time              `json:"phone_change_sent_at,omitempty"`
	PhoneConfirmedAt       *time.Time              `json:"phone_confirmed_at,omitempty"`
	ReauthenticationSentAt *time.Time              `json:"reauthentication_sent_at,omitempty"`
	RecoverySentAt         *time.Time              `json:"recovery_sent_at,omitempty"`
	Role                   *string                 `json:"role,omitempty"`
	UpdatedAt              *time.Time              `json:"updated_at,omitempty"`
	UserMetadata           *map[string]interface{} `json:"user_metadata,omitempty"`
}

// WebAuthnChallengeResponse defines model for WebAuthnChallengeResponse.
type WebAuthnChallengeResponse struct {
	// CredentialCreationOptions Options for creating a new credential
	CredentialCreationOptions *CredentialCreationOptions `json:"credential_creation_options,omitempty"`

	// CredentialRequestOptions Options for requesting an assertion
	CredentialRequestOptions *CredentialRequestOptions `json:"credential_request_options,omitempty"`

	// ExpiresAt UNIX seconds of the timestamp past which the challenge should not be verified.
	ExpiresAt int `json:"expires_at"`

	// Id ID of the challenge.
	Id openapi_types.UUID `json:"id"`

	// Type Type of the challenge.
	Type WebAuthnChallengeResponseType `json:"type"`
}

// WebAuthnChallengeResponseType Type of the challenge.
type WebAuthnChallengeResponseType string

// BadRequestResponse defines model for BadRequestResponse.
type BadRequestResponse = ErrorSchema

// RateLimitResponse defines model for RateLimitResponse.
type RateLimitResponse struct {
	Code *int `json:"code,omitempty"`

	// Msg A basic message describing the rate limit breach. Do not use as an error code identifier.
	Msg *string `json:"msg,omitempty"`
}

// PostFactorsJSONBody defines parameters for PostFactors.
type PostFactorsJSONBody struct {
	FactorType   PostFactorsJSONBodyFactorType `json:"factor_type"`
	FriendlyName *string                       `json:"friendly_name,omitempty"`
	Issuer       *string                       `json:"issuer,omitempty"`
	Phone        *string                       `json:"phone,omitempty"`
}

// PostFactorsJSONBodyFactorType defines parameters for PostFactors.
type PostFactorsJSONBodyFactorType string

// PostFactorsFactorIdChallengeJSONBody defines parameters for PostFactorsFactorIdChallenge.
type PostFactorsFactorIdChallengeJSONBody struct {
	Channel *PostFactorsFactorIdChallengeJSONBodyChannel `json:"channel,omitempty"`
}

// PostFactorsFactorIdChallengeJSONBodyChannel defines parameters for PostFactorsFactorIdChallenge.
type PostFactorsFactorIdChallengeJSONBodyChannel string

// PostFactorsFactorIdVerifyJSONBody defines parameters for PostFactorsFactorIdVerify.
type PostFactorsFactorIdVerifyJSONBody struct {
	ChallengeId openapi_types.UUID `json:"challenge_id"`
	Code        *string            `json:"code,omitempty"`
}

// PutUserJSONBody defines parameters for PutUser.
type PutUserJSONBody struct {
	AppMetadata *map[string]interface{} `json:"app_metadata,omitempty"`
	Channel     *PutUserJSONBodyChannel `json:"channel,omitempty"`
	Data        *map[string]interface{} `json:"data,omitempty"`
	Email       *openapi_types.Email    `json:"email,omitempty"`
	Nonce       *string                 `json:"nonce,omitempty"`
	Password    *string                 `json:"password,omitempty"`
	Phone       *string                 `json:"phone,omitempty"`
}

// PutUserJSONBodyChannel defines parameters for PutUser.
type PutUserJSONBodyChannel string

// PostFactorsJSONRequestBody defines body for PostFactors for application/json ContentType.
type PostFactorsJSONRequestBody PostFactorsJSONBody

// PostFactorsFactorIdChallengeJSONRequestBody defines body for PostFactorsFactorIdChallenge for application/json ContentType.
type PostFactorsFactorIdChallengeJSONRequestBody PostFactorsFactorIdChallengeJSONBody

// PostFactorsFactorIdVerifyJSONRequestBody defines body for PostFactorsFactorIdVerify for application/json ContentType.
type PostFactorsFactorIdVerifyJSONRequestBody PostFactorsFactorIdVerifyJSONBody

// PutUserJSONRequestBody defines body for PutUser for application/json ContentType.
type PutUserJSONRequestBody PutUserJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostFactorsWithBody request with any body
	PostFactorsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFactors(ctx context.Context, body PostFactorsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFactorsFactorId request
	DeleteFactorsFactorId(ctx context.Context, factorId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFactorsFactorIdChallengeWithBody request with any body
	PostFactorsFactorIdChallengeWithBody(ctx context.Context, factorId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFactorsFactorIdChallenge(ctx context.Context, factorId openapi_types.UUID, body PostFactorsFactorIdChallengeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFactorsFactorIdVerifyWithBody request with any body
	PostFactorsFactorIdVerifyWithBody(ctx context.Context, factorId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFactorsFactorIdVerify(ctx context.Context, factorId openapi_types.UUID, body PostFactorsFactorIdVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReauthenticate request
	PostReauthenticate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutUserWithBody request with any body
	PutUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutUser(ctx context.Context, body PutUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostFactorsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFactorsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFactors(ctx context.Context, body PostFactorsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFactorsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFactorsFactorId(ctx context.Context, factorId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFactorsFactorIdRequest(c.Server, factorId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFactorsFactorIdChallengeWithBody(ctx context.Context, factorId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFactorsFactorIdChallengeRequestWithBody(c.Server, factorId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFactorsFactorIdChallenge(ctx context.Context, factorId openapi_types.UUID, body PostFactorsFactorIdChallengeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFactorsFactorIdChallengeRequest(c.Server, factorId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFactorsFactorIdVerifyWithBody(ctx context.Context, factorId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFactorsFactorIdVerifyRequestWithBody(c.Server, factorId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFactorsFactorIdVerify(ctx context.Context, factorId openapi_types.UUID, body PostFactorsFactorIdVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFactorsFactorIdVerifyRequest(c.Server, factorId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReauthenticate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReauthenticateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUser(ctx context.Context, body PutUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostFactorsRequest calls the generic PostFactors builder with application/json body
func NewPostFactorsRequest(server string, body PostFactorsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFactorsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFactorsRequestWithBody generates requests for PostFactors with any type of body
func NewPostFactorsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/factors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFactorsFactorIdRequest generates requests for DeleteFactorsFactorId
func NewDeleteFactorsFactorIdRequest(server string, factorId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "factorId", runtime.ParamLocationPath, factorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/factors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostFactorsFactorIdChallengeRequest calls the generic PostFactorsFactorIdChallenge builder with application/json body
func NewPostFactorsFactorIdChallengeRequest(server string, factorId openapi_types.UUID, body PostFactorsFactorIdChallengeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFactorsFactorIdChallengeRequestWithBody(server, factorId, "application/json", bodyReader)
}

// NewPostFactorsFactorIdChallengeRequestWithBody generates requests for PostFactorsFactorIdChallenge with any type of body
func NewPostFactorsFactorIdChallengeRequestWithBody(server string, factorId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "factorId", runtime.ParamLocationPath, factorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/factors/%s/challenge", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFactorsFactorIdVerifyRequest calls the generic PostFactorsFactorIdVerify builder with application/json body
func NewPostFactorsFactorIdVerifyRequest(server string, factorId openapi_types.UUID, body PostFactorsFactorIdVerifyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFactorsFactorIdVerifyRequestWithBody(server, factorId, "application/json", bodyReader)
}

// NewPostFactorsFactorIdVerifyRequestWithBody generates requests for PostFactorsFactorIdVerify with any type of body
func NewPostFactorsFactorIdVerifyRequestWithBody(server string, factorId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "factorId", runtime.ParamLocationPath, factorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/factors/%s/verify", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostReauthenticateRequest generates requests for PostReauthenticate
func NewPostReauthenticateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reauthenticate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutUserRequest calls the generic PutUser builder with application/json body
func NewPutUserRequest(server string, body PutUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutUserRequestWithBody(server, "application/json", bodyReader)
}

// NewPutUserRequestWithBody generates requests for PutUser with any type of body
func NewPutUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostFactorsWithBodyWithResponse request with any body
	PostFactorsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFactorsResponse, error)

	PostFactorsWithResponse(ctx context.Context, body PostFactorsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFactorsResponse, error)

	// DeleteFactorsFactorIdWithResponse request
	DeleteFactorsFactorIdWithResponse(ctx context.Context, factorId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteFactorsFactorIdResponse, error)

	// PostFactorsFactorIdChallengeWithBodyWithResponse request with any body
	PostFactorsFactorIdChallengeWithBodyWithResponse(ctx context.Context, factorId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFactorsFactorIdChallengeResponse, error)

	PostFactorsFactorIdChallengeWithResponse(ctx context.Context, factorId openapi_types.UUID, body PostFactorsFactorIdChallengeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFactorsFactorIdChallengeResponse, error)

	// PostFactorsFactorIdVerifyWithBodyWithResponse request with any body
	PostFactorsFactorIdVerifyWithBodyWithResponse(ctx context.Context, factorId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFactorsFactorIdVerifyResponse, error)

	PostFactorsFactorIdVerifyWithResponse(ctx context.Context, factorId openapi_types.UUID, body PostFactorsFactorIdVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFactorsFactorIdVerifyResponse, error)

	// PostReauthenticateWithResponse request
	PostReauthenticateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostReauthenticateResponse, error)

	// GetUserWithResponse request
	GetUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// PutUserWithBodyWithResponse request with any body
	PutUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUserResponse, error)

	PutUserWithResponse(ctx context.Context, body PutUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUserResponse, error)
}

type N200Type string

const (
	N200TypePhone N200Type = "phone"	
	N200TypeTotp N200Type = "totp"
	N200TypeWebauthn N200Type = "webauthn"
)

type PostFactorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id    *string `json:"id,omitempty"`
		Phone *string `json:"phone,omitempty"`
		Totp  *struct {
			QrCode *string `json:"qr_code,omitempty"`
			Secret *string `json:"secret,omitempty"`
			Uri    *string `json:"uri,omitempty"`
		} `json:"totp,omitempty"`
		Type *N200Type `json:"type,omitempty"`
	}
	JSON400 *BadRequestResponse
}

// Status returns HTTPResponse.Status
func (r PostFactorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFactorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFactorsFactorIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id *openapi_types.UUID `json:"id,omitempty"`
	}
	JSON400 *BadRequestResponse
}

// Status returns HTTPResponse.Status
func (r DeleteFactorsFactorIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFactorsFactorIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFactorsFactorIdChallengeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON400 *BadRequestResponse
	JSON429 *RateLimitResponse
}

// Status returns HTTPResponse.Status
func (r PostFactorsFactorIdChallengeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFactorsFactorIdChallengeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFactorsFactorIdVerifyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccessTokenResponseSchema
	JSON400      *BadRequestResponse
	JSON429      *RateLimitResponse
}

// Status returns HTTPResponse.Status
func (r PostFactorsFactorIdVerifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFactorsFactorIdVerifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReauthenticateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *BadRequestResponse
	JSON429      *RateLimitResponse
}

// Status returns HTTPResponse.Status
func (r PostReauthenticateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReauthenticateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserSchema
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserSchema
	JSON400      *BadRequestResponse
	JSON429      *RateLimitResponse
}

// Status returns HTTPResponse.Status
func (r PutUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostFactorsWithBodyWithResponse request with arbitrary body returning *PostFactorsResponse
func (c *ClientWithResponses) PostFactorsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFactorsResponse, error) {
	rsp, err := c.PostFactorsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFactorsResponse(rsp)
}

func (c *ClientWithResponses) PostFactorsWithResponse(ctx context.Context, body PostFactorsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFactorsResponse, error) {
	rsp, err := c.PostFactors(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFactorsResponse(rsp)
}

// DeleteFactorsFactorIdWithResponse request returning *DeleteFactorsFactorIdResponse
func (c *ClientWithResponses) DeleteFactorsFactorIdWithResponse(ctx context.Context, factorId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteFactorsFactorIdResponse, error) {
	rsp, err := c.DeleteFactorsFactorId(ctx, factorId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFactorsFactorIdResponse(rsp)
}

// PostFactorsFactorIdChallengeWithBodyWithResponse request with arbitrary body returning *PostFactorsFactorIdChallengeResponse
func (c *ClientWithResponses) PostFactorsFactorIdChallengeWithBodyWithResponse(ctx context.Context, factorId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFactorsFactorIdChallengeResponse, error) {
	rsp, err := c.PostFactorsFactorIdChallengeWithBody(ctx, factorId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFactorsFactorIdChallengeResponse(rsp)
}

func (c *ClientWithResponses) PostFactorsFactorIdChallengeWithResponse(ctx context.Context, factorId openapi_types.UUID, body PostFactorsFactorIdChallengeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFactorsFactorIdChallengeResponse, error) {
	rsp, err := c.PostFactorsFactorIdChallenge(ctx, factorId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFactorsFactorIdChallengeResponse(rsp)
}

// PostFactorsFactorIdVerifyWithBodyWithResponse request with arbitrary body returning *PostFactorsFactorIdVerifyResponse
func (c *ClientWithResponses) PostFactorsFactorIdVerifyWithBodyWithResponse(ctx context.Context, factorId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFactorsFactorIdVerifyResponse, error) {
	rsp, err := c.PostFactorsFactorIdVerifyWithBody(ctx, factorId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFactorsFactorIdVerifyResponse(rsp)
}

func (c *ClientWithResponses) PostFactorsFactorIdVerifyWithResponse(ctx context.Context, factorId openapi_types.UUID, body PostFactorsFactorIdVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFactorsFactorIdVerifyResponse, error) {
	rsp, err := c.PostFactorsFactorIdVerify(ctx, factorId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFactorsFactorIdVerifyResponse(rsp)
}

// PostReauthenticateWithResponse request returning *PostReauthenticateResponse
func (c *ClientWithResponses) PostReauthenticateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostReauthenticateResponse, error) {
	rsp, err := c.PostReauthenticate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReauthenticateResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// PutUserWithBodyWithResponse request with arbitrary body returning *PutUserResponse
func (c *ClientWithResponses) PutUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUserResponse, error) {
	rsp, err := c.PutUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUserResponse(rsp)
}

func (c *ClientWithResponses) PutUserWithResponse(ctx context.Context, body PutUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUserResponse, error) {
	rsp, err := c.PutUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUserResponse(rsp)
}

// ParsePostFactorsResponse parses an HTTP response from a PostFactorsWithResponse call
func ParsePostFactorsResponse(rsp *http.Response) (*PostFactorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFactorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id    *string `json:"id,omitempty"`
			Phone *string `json:"phone,omitempty"`
			Totp  *struct {
				QrCode *string `json:"qr_code,omitempty"`
				Secret *string `json:"secret,omitempty"`
				Uri    *string `json:"uri,omitempty"`
			} `json:"totp,omitempty"`
			Type *N200Type `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteFactorsFactorIdResponse parses an HTTP response from a DeleteFactorsFactorIdWithResponse call
func ParseDeleteFactorsFactorIdResponse(rsp *http.Response) (*DeleteFactorsFactorIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFactorsFactorIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id *openapi_types.UUID `json:"id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostFactorsFactorIdChallengeResponse parses an HTTP response from a PostFactorsFactorIdChallengeWithResponse call
func ParsePostFactorsFactorIdChallengeResponse(rsp *http.Response) (*PostFactorsFactorIdChallengeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFactorsFactorIdChallengeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePostFactorsFactorIdVerifyResponse parses an HTTP response from a PostFactorsFactorIdVerifyWithResponse call
func ParsePostFactorsFactorIdVerifyResponse(rsp *http.Response) (*PostFactorsFactorIdVerifyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFactorsFactorIdVerifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccessTokenResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePostReauthenticateResponse parses an HTTP response from a PostReauthenticateWithResponse call
func ParsePostReauthenticateResponse(rsp *http.Response) (*PostReauthenticateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostReauthenticateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutUserResponse parses an HTTP response from a PutUserWithResponse call
func ParsePutUserResponse(rsp *http.Response) (*PutUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest RateLimitResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}
